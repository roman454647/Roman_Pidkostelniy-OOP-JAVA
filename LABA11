package LAAAba11;
import java.io.*;
import java.util.Scanner;
public class LAba11 {
    public static void main(String[] args) {
        LinkedList LinkedList = new LinkedList();
        Scanner scan = new Scanner(System.in);
        System.out.println("Please fill up this form");
        System.out.println("Brand: ");
        String brand = new String();
        brand = scan.nextLine();
        System.out.println("Model: ");
        String model = new String();
        model = scan.nextLine();
        System.out.println("Register number: ");
        String number = new String();
        number = scan.nextLine();

        System.out.println("Engine: ");
        String engine = new String();
        engine = scan.nextLine();

        System.out.println("Power: ");
        String power = new String();
        power = scan.nextLine();

        LinkedList.setT1(brand);
        LinkedList.setT2(model);
        LinkedList.setT3(number);
        LinkedList.setT4(engine);
        LinkedList.setT5(power);
        LinkedList LinkedList1 = new LinkedList();
        LinkedList1.add(LinkedList);
        while (true) {
            System.out.println("please enter 0 to exit 1-to enter data  2-size 3-toString 4-delete:");
            char menu = scan.next().charAt(0);
            switch (menu) {
                case '1':
                    System.out.println("Please fill up this form");
                    System.out.println("Brand: ");
                    String bran = new String();
                    bran = scan.nextLine();

                    System.out.println("Model: ");
                    String mode = new String();
                    mode = scan.nextLine();

                    System.out.println("Register number: ");
                    String numbe = new String();
                    numbe = scan.nextLine();

                    System.out.println("Engine: ");
                    String engin = new String();
                    engin = scan.nextLine();

                    System.out.println("Power: ");
                    String powe = new String();
                    powe = scan.nextLine();

                    LinkedList.setT1(bran);
                    LinkedList.setT2(mode);
                    LinkedList.setT3(numbe);
                    LinkedList.setT4(engin);
                    LinkedList.setT5(powe);

                    LinkedList1.add(LinkedList);
                case '2':
                    System.out.println(LinkedList1.size());
                    break;
                case '3':
                    System.out.println(LinkedList1.toString());
                    break;

                case '0':
                    System.out.println("See u next time");
                    return;


                case '4':
                    System.out.println("enter the index:");
                    int n = scan.nextInt();
                    LinkedList1.delete(n);
                    break;

            }

        }
package LAAAba11;

public class LinkedList<T1, T2, T3, T4, T5> {

    public T1 getT1() {
        return t1;
    }

    public void setT1(T1 t1) {
        this.t1 = t1;
    }

    public T2 getT2() {
        return t2;
    }

    public void setT2(T2 t2) {
        this.t2 = t2;
    }

    public T3 getT3() {
        return t3;
    }

    public void setT3(T3 t3) {
        this.t3 = t3;
    }

    public T4 getT4() {
        return t4;
    }

    public void setT4(T4 t4) {
        this.t4 = t4;
    }

    public T5 getT5() {
        return t5;
    }

    public void setT5(T5 t5) {
        this.t5 = t5;
    }

    private T1 t1;
    private T2 t2;
    private T3 t3;
    private T4 t4;
    private T5 t5;
    Node head;

    public LinkedList() {

    }

    /* Додати елемент в кінець списку */
    public void add(LinkedList <T1, T2, T3, T4, T5> data) {

        if (head == null) {
            head = new Node();
            head.setData(data);
        } else {
            Node node = new Node();
            node.setData(data);
            Node temp = head;
            while (temp.getNext() != null) {
                temp = temp.getNext();
            }
            temp.setNext(node);
        }
    }

    /* Отримати елемент по індексу, повертає null якщо такий елемент недоступний */
    public LinkedList<T1, T2, T3, T4, T5> get(int index) {
        if (index == 0) {
            return head.getData();
        } else if (index > 0) {
            if (head.getNext() != null) {
                Node temp = head;
                int position = 1;
                while (temp.getNext() != null) {
                    if (position == index) {
                        return temp.getNext().getData();
                    } else {
                        temp = temp.getNext();
                        position++;
                    }
                }
            }
        }
        return null;
    }

    /* Вилучення елементу за індексом, повертає true у разі успіху або false в іншому випадку */
    public boolean delete(int index) {
        if (index == 0) {
            if (head == null) {
                return false;
            } else {
                if (head.getNext() == null) {
                    head = null;
                    return true;
                } else {
                    head = head.getNext();
                    return true;
                }
            }
        }

        if (index > 0) {
            if (head.getNext() != null) {
                Node temp = head;
                int position = 1;
                while (temp.getNext() != null) {
                    if (position == index) {
                        temp.setNext(temp.getNext().getNext());
                        return true;
                    } else {
                        temp = temp.getNext();
                        position++;
                    }
                }
            }
        }
        return false;
    }

    /*Поверта розмір списку: якщо елементів в списку нема то повертає 0 (нуль)*/
    public int size() {
        int size = 0;
        if (head != null) {
            if (head.getNext() != null) {
                Node temp = head;
                size = 1;
                while (temp.getNext() != null) {
                    temp = temp.getNext();
                    size++;
                }
            } else {
                size = 1;
            }
        }
        return size;
    }

    @Override
    public String toString() {
        StringBuffer str = new StringBuffer();

        Node toGet = head;
        while (toGet != null){
            str.append(toGet.getData().getT1().toString()).append(" ");
            str.append(toGet.getData().getT2().toString()).append(" ");
            str.append(toGet.getData().getT3().toString()).append(" ");
            str.append(toGet.getData().getT4().toString()).append(" ");
            str.append(toGet.getData().getT5().toString()).append(" ");
            toGet = toGet.getNext();
        }

        return str.toString();
    }

    public class Node {
        private Node next;
        private LinkedList <T1, T2, T3, T4, T5> data;

        public Node() {
        }

        public Node getNext() {
            return next;
        }
        public void setNext(Node next) {
            this.next = next;
        }
        LinkedList <T1, T2, T3, T4, T5> getData() {
            return data;
        }
        public void setData(LinkedList <T1, T2, T3, T4, T5> data) {
            this.data = data;
        }

    }
